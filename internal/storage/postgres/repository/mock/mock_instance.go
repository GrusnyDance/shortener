// Code generated by MockGen. DO NOT EDIT.
// Source: internal/entities/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CheckIfHashedExists mocks base method.
func (m *MockRepository) CheckIfHashedExists(ctx context.Context, hashed string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfHashedExists", ctx, hashed)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckIfHashedExists indicates an expected call of CheckIfHashedExists.
func (mr *MockRepositoryMockRecorder) CheckIfHashedExists(ctx, hashed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfHashedExists", reflect.TypeOf((*MockRepository)(nil).CheckIfHashedExists), ctx, hashed)
}

// Close mocks base method.
func (m *MockRepository) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepository)(nil).Close))
}

// CreateLink mocks base method.
func (m *MockRepository) CreateLink(ctx context.Context, hashed, original string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLink", ctx, hashed, original)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLink indicates an expected call of CreateLink.
func (mr *MockRepositoryMockRecorder) CreateLink(ctx, hashed, original interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLink", reflect.TypeOf((*MockRepository)(nil).CreateLink), ctx, hashed, original)
}

// ReturnLink mocks base method.
func (m *MockRepository) ReturnLink(ctx context.Context, hashed string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnLink", ctx, hashed)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReturnLink indicates an expected call of ReturnLink.
func (mr *MockRepositoryMockRecorder) ReturnLink(ctx, hashed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnLink", reflect.TypeOf((*MockRepository)(nil).ReturnLink), ctx, hashed)
}
